from tkinter import filedialog, Tk, Button, Label, messagebox, StringVar
from pdf2docx import Converter
from docx2pdf import convert
import pytesseract
from PIL import Image
import os
import threading
import subprocess
import sys

pytesseract.pytesseract.tesseract_cmd = r"E:\ProgramFile\OCR\tesseract.exe"
os.environ["TQDM_DISABLE"] = "1"

PDF_TO_WORD_OUTPUT = r"D:\app\tool\document\pdf_to_word"
IMAGE_TO_TEXT_OUTPUT = r"D:\app\tool\document\text_from_photo"
WORD_TO_PDF_OUTPUT = r"D:\app\tool\document\word_to_pdf"

if sys.stderr is None:
    sys.stderr = open(os.devnull, "w")
if sys.stdout is None:
    sys.stdout = open(os.devnull, "w")


def openFolder(path):
    if os.path.exists(path):
        subprocess.Popen(f'explorer "{path}"')
    else:
        messagebox.showerror("L·ªói ‚ùå", f"Folder kh√¥ng t·ªìn t·∫°i:\n{path}")


def setLoading(text):
    loadingVar.set(text)
    root.update_idletasks()


def pdfToWord():
    try:
        pdfPath = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
        if not pdfPath:
            return
        baseName = os.path.basename(pdfPath).replace(".pdf", ".docx")
        docxPath = os.path.join(PDF_TO_WORD_OUTPUT, baseName)

        def task():
            try:
                setLoading("‚è≥ ƒêang chuy·ªÉn PDF ‚ûú Word ...")
                cv = Converter(pdfPath)
                cv.convert(docxPath, start=0, end=None)
                cv.close()
                setLoading("")
                messagebox.showinfo("Th√†nh c√¥ng üéâ", f"‚úÖ PDF ‚ûú Word: {docxPath}")
            except Exception as e:
                setLoading("")
                messagebox.showerror(
                    "L·ªói ‚ùå", f"Chuy·ªÉn ƒë·ªïi PDF ‚ûú Word th·∫•t b·∫°i:\n{str(e)}"
                )

        threading.Thread(target=task).start()

    except Exception as ex:
        messagebox.showerror("L·ªói ‚ùå", f"Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi PDF ‚ûú Word:\n{str(ex)}")


def imageToText():
    try:
        imgPath = filedialog.askopenfilename(
            filetypes=[("Image files", "*.png;*.jpg;*.jpeg")]
        )
        if not imgPath:
            return
        baseName = os.path.basename(imgPath)
        txtName = os.path.splitext(baseName)[0] + ".txt"
        txtPath = os.path.join(IMAGE_TO_TEXT_OUTPUT, txtName)

        def task():
            try:
                setLoading("‚è≥ ƒêang qu√©t ·∫£nh ‚ûú Text ...")
                img = Image.open(imgPath)
                text = pytesseract.image_to_string(img, lang="eng")
                with open(txtPath, "w", encoding="utf-8") as f:
                    f.write(text)
                setLoading("")
                messagebox.showinfo("Th√†nh c√¥ng üéâ", f"‚úÖ ·∫¢nh ‚ûú Text: {txtPath}")
            except Exception as e:
                setLoading("")
                messagebox.showerror("L·ªói ‚ùå", f"Qu√©t ·∫£nh th·∫•t b·∫°i:\n{str(e)}")

        threading.Thread(target=task).start()

    except Exception as ex:
        messagebox.showerror("L·ªói ‚ùå", f"Kh√¥ng th·ªÉ qu√©t ·∫£nh:\n{str(ex)}")


def wordToPdf():
    try:
        docxPath = filedialog.askopenfilename(filetypes=[("Word files", "*.docx")])
        if not docxPath:
            return
        baseName = os.path.basename(docxPath).replace(".docx", ".pdf")
        outputPdf = os.path.join(WORD_TO_PDF_OUTPUT, baseName)

        def task():
            try:
                setLoading("‚è≥ ƒêang chuy·ªÉn Word ‚ûú PDF ...")

                convert(docxPath, outputPdf)
                setLoading("")
                messagebox.showinfo("Th√†nh c√¥ng üéâ", f"‚úÖ Word ‚ûú PDF: {outputPdf}")
            except Exception as e:
                setLoading("")
                import traceback

                # messagebox.showerror("L·ªói ‚ùå", f"Chuy·ªÉn ƒë·ªïi Word ‚ûú PDF th·∫•t b·∫°i:\n{str(e)}")
                messagebox.showerror(
                    "L·ªói ‚ùå",
                    f"Chuy·ªÉn ƒë·ªïi Word ‚ûú PDF th·∫•t b·∫°i:\n{traceback.format_exc()}",
                )

        threading.Thread(target=task).start()

    except Exception as ex:
        messagebox.showerror("L·ªói ‚ùå", f"Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi Word ‚ûú PDF:\n{str(ex)}")


root = Tk()
root.title("üõ†Ô∏è Tool Chuy·ªÉn ƒê·ªïi T√†i Li·ªáu - H·ªì Trung developer")
root.geometry("520x400")

loadingVar = StringVar()
loadingLabel = Label(root, textvariable=loadingVar, font=("Arial", 11), fg="blue")
loadingLabel.pack(pady=10)

Label(root, text="üìå Ch·ªçn ch·ª©c nƒÉng:", font=("Arial", 14, "bold")).pack(pady=10)

framePdfWord = Button(
    root,
    text="üìÑ PDF ‚ûú Word",
    width=30,
    command=pdfToWord,
    bg="#4caf50",
    fg="white",
    font=("Arial", 12, "bold"),
)
framePdfWord.pack(pady=8)
btnOpenPdfWordFolder = Button(
    root,
    text="üìÇ M·ªü th∆∞ m·ª•c PDF ‚ûú Word",
    width=30,
    command=lambda: openFolder(PDF_TO_WORD_OUTPUT),
)
btnOpenPdfWordFolder.pack()

btnImageToText = Button(
    root,
    text="üñºÔ∏è ·∫¢nh ‚ûú Text (.txt)",
    width=30,
    command=imageToText,
    bg="#2196f3",
    fg="white",
    font=("Arial", 12, "bold"),
)
btnImageToText.pack(pady=8)
btnOpenImageTextFolder = Button(
    root,
    text="üìÇ M·ªü th∆∞ m·ª•c ·∫¢nh ‚ûú Text",
    width=30,
    command=lambda: openFolder(IMAGE_TO_TEXT_OUTPUT),
)
btnOpenImageTextFolder.pack()

btnWordToPdf = Button(
    root,
    text="üìù Word ‚ûú PDF",
    width=30,
    command=wordToPdf,
    bg="#f44336",
    fg="white",
    font=("Arial", 12, "bold"),
)
btnWordToPdf.pack(pady=8)
btnOpenWordPdfFolder = Button(
    root,
    text="üìÇ M·ªü th∆∞ m·ª•c Word ‚ûú PDF",
    width=30,
    command=lambda: openFolder(WORD_TO_PDF_OUTPUT),
)
btnOpenWordPdfFolder.pack()

root.mainloop()
